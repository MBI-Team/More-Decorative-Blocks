plugins {
    id 'java'
    id 'net.neoforged.gradle.userdev' version '7.0.142'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// 从 gradle.properties 加载属性
def mod_id = project.mod_id
def mod_name = project.mod_name
def mod_version = project.mod_version
def minecraft_version = project.minecraft_version
def neo_version = project.neo_version

// 配置 Minecraft 和 NeoForge
minecraft {
}

// 依赖配置
dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation 'org.slf4j:slf4j-simple:2.0.9'

    // 测试依赖
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'org.mockito:mockito-inline:4.6.1'
}

// 测试配置
test {
    useJUnitPlatform()
}

// 处理资源文件
processResources {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes([
                'Specification-Title'   : mod_name,
                'Specification-Vendor'  : mod_authors,
                'Specification-Version' : mod_version,
                'Implementation-Title'  : mod_name,
                'Implementation-Version': mod_version,
                'Implementation-Vendor' : mod_authors,
        ])
    }
    // 将生成的 JAR 文件名设置为包含版本号
    archiveBaseName = mod_id
    archiveVersion = mod_version
}

// 确保测试可以访问主类路径
sourceSets {
    test {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}
